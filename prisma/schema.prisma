// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id                String              @id @default(cuid())
  firstname         String?
  lastname          String?
  email             String              @unique
  confirmedEmail    Boolean?
  password          String?
  googleId          String?             @unique
  avatarBase64      String?             @db.LongText
  avatarUri         String?
  isAdmin           Boolean?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  loggedIn          DateTime?
  Group             Group[]
  Member            Member[]
  Expense           Expense[]
  Paying            Paying[]
  UserCode          UserCode[]
  UserTerm          UserTerm[]
  NotificationToken NotificationToken[]
}

model Group {
  id           String         @id @default(cuid())
  title        String
  user_id      String
  creator      User           @relation(fields: [user_id], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  Member       Member[]
  Expense      Expense[]
  Notification Notification[]
}

model Member {
  group_id  String
  user_id   String
  group     Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  member    User     @relation(fields: [user_id], references: [id])
  isAdmin   Boolean?
  createdAt DateTime @default(now())

  @@unique([group_id, user_id])
}

model Expense {
  id           String         @id @default(cuid())
  title        String
  group_id     String
  cost         Decimal
  user_id      String
  group        Group          @relation(fields: [group_id], references: [id], onDelete: Cascade)
  creator      User           @relation(fields: [user_id], references: [id])
  dueDate      DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  Paying       Paying[]
  Notification Notification[]
}

model Paying {
  expense_id String
  user_id    String
  cost       Decimal
  paid       Boolean
  paidAt     DateTime?
  expense    Expense   @relation(fields: [expense_id], references: [id], onDelete: Cascade)
  paying     User      @relation(fields: [user_id], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@unique([expense_id, user_id])
}

model CodeRequestType {
  id        String     @id @default(cuid())
  slug      String     @unique
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  UserCode  UserCode[]
}

model UserCode {
  id                   String          @id @default(cuid())
  user_id              String
  code_request_type_id String
  CodeRequestType      CodeRequestType @relation(fields: [code_request_type_id], references: [id])
  user                 User            @relation(fields: [user_id], references: [id])
  code                 String
  validatedIn          DateTime?
  expiresIn            DateTime
  createdAt            DateTime        @default(now())
}

model Term {
  id        String     @id @default(cuid())
  title     String     @unique
  slug      String     @unique
  text      String     @db.Text
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  UserTerm  UserTerm[]
}

model UserTerm {
  user_id    String
  term_id    String
  accepted   Boolean?
  acceptedAt DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  term Term @relation(fields: [term_id], references: [id], onDelete: Cascade)

  @@id([user_id, term_id])
}

model NotificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Notification Notification?
}

model Notification {
  id                  String   @id @default(cuid())
  notificationTokenId String   @unique
  notificationId      String
  topic               String?
  groupId             String?
  expenseId           String?
  title               String
  body                String   @db.Text
  url                 String?
  createdAt           DateTime @default(now())

  notificationToken NotificationToken @relation(fields: [notificationTokenId], references: [id], onDelete: Cascade)
  group             Group?            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  expense           Expense?          @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}
